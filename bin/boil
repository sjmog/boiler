#!/usr/bin/env bash

set -euo pipefail

# Change to the project root directory
cd "$(dirname "${BASH_SOURCE[0]}")/.."

echo "Setting up the repository and preparing the application for development..."

# Check if yq is installed, if not, install it
if ! command -v yq &> /dev/null; then
    echo "yq is not installed. Installing it now..."
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew install yq
    else
        echo "Unsupported operating system. Please install yq manually: https://github.com/mikefarah/yq#install"
        exit 1
    fi
fi

# Function to prompt for input with instructions
prompt_with_instructions() {
    local var_name="$1"
    local prompt="$2"
    local instructions="$3"
    local default="${4:-}"
    local hidden="${5:-false}"
    local capture_to_env="${6:-true}"

    # Redirect prompt messages to stderr to prevent them from being captured
    echo >&2
    echo >&2 "$prompt"
    echo >&2 "$instructions"
    
    if [ "$hidden" = true ]; then
        if [ -n "$default" ]; then
            read -s -p "Enter $var_name [$default]: " input
            echo >&2
            input="${input:-$default}"
        else
            read -s -p "Enter $var_name: " input
            echo >&2
        fi
        if [ "$capture_to_env" = true ]; then
            echo "$var_name=$input" >> .deployment.env
        fi
    else
        if [ -n "$default" ]; then
            read -p "Enter $var_name [$default]: " input
            input="${input:-$default}"
        else
            read -p "Enter $var_name: " input
        fi
        if [ "$capture_to_env" = true ]; then
            echo "$var_name=$input" >> .deployment.env
        fi
        printf "%s" "$input" | tr -d '\n'
    fi
}

# Function to update infrastructure.yml
update_infrastructure() {
    local key="$1"
    local value="$2"
    local append_environment="${3:-false}" 
    if [ "$append_environment" = true ]; then
        yq eval ".production.$key = \"$value\"" -i infrastructure.yml
        yq eval ".staging.$key = \"$value.staging\"" -i infrastructure.yml
        yq eval ".preview.$key = \"$value.preview\"" -i infrastructure.yml
    else
        yq eval ".production.$key = \"$value\"" -i infrastructure.yml
        yq eval ".staging.$key = \"$value\"" -i infrastructure.yml
        yq eval ".preview.$key = \"$value\"" -i infrastructure.yml
    fi
}

# Create or clear .deployment.env file
> .deployment.env

# Prompt for environment variables
prompt_with_instructions "HETZNER_API_KEY" "Enter your Hetzner API Key" "To obtain this, go to https://console.hetzner.cloud/projects, select your project, and create an API token."

prompt_with_instructions "CLOUDFLARE_API_TOKEN" "Enter your Cloudflare API Token" "To obtain this, go to https://dash.cloudflare.com/profile/api-tokens and create a token with the necessary permissions."

prompt_with_instructions "GITHUB_USERNAME" "Enter your GitHub username" "This is used for SSH key import in the cloud-init configuration."

prompt_with_instructions "DOCKER_USERNAME" "Enter your Docker Hub username" "This is used for pushing and pulling Docker images. Create an account at https://hub.docker.com/ if you don't have one."

prompt_with_instructions "REGISTRY_PASSWORD" "Enter your Docker Hub registry password" "This is used for pushing and pulling Docker images." "" true  # {{ edit_5 }} Enable hidden input for password

# Prompt for domain and subdomain and update infrastructure.yml
domain=$(prompt_with_instructions "DOMAIN_NAME" "Enter your domain name" "This is the domain you'll use for your application, e.g., 'example.com'" "boiler.app" "" false false)
update_infrastructure "domain" "$domain" false

subdomain=$(prompt_with_instructions "SUBDOMAIN" "Enter your subdomain" "This is the subdomain for your application, use '@' for apex domain" "@" "" false false)
update_infrastructure "subdomain" "$subdomain" true

echo "Depoloyment secrets have been saved to .deployment.env"
echo "Domain and subdomain have been updated in infrastructure.yml"

# Function to install gh CLI
install_gh_cli() {
    echo "GitHub CLI (gh) is not installed. Installing it now..."
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew install gh
    else
        echo "Unsupported operating system. Please install GitHub CLI manually: https://github.com/cli/cli#installation"
        exit 1
    fi
}

# Ensure gh CLI is installed
if ! command -v gh &> /dev/null; then
    install_gh_cli
fi

# Check if user is logged in to GitHub
if ! gh auth status &> /dev/null; then
    echo "You are not logged in to GitHub. Please log in now."
    gh auth login -w
fi

# Verify login was successful
if ! gh auth status &> /dev/null; then
    echo "GitHub login failed. Please try again manually using 'gh auth login'."
    exit 1
fi

# Set up GitHub secrets
echo "Setting up GitHub secrets..."
for secret in HETZNER_API_KEY CLOUDFLARE_API_TOKEN REGISTRY_PASSWORD DOCKER_USERNAME; do
    value=$(grep "^$secret=" .deployment.env | cut -d '=' -f2-)
    echo "Setting $secret as a GitHub secret..."
    echo "$value" | gh secret set "$secret"
done

echo "GitHub secrets have been set successfully."

# Install dependencies
echo "Installing Ruby dependencies..."
bundle install

echo "Installing JavaScript dependencies..."
yarn install

# Set up the database
echo "Setting up the database..."
bin/rails db:setup

echo "Setup complete! You can now start the application with 'bin/dev'."
echo "To stop the application, use 'Ctrl+C' followed by 'bin/stop'."