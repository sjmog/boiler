name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  push:
    branches: [ main, staging ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y google-chrome-stable curl libjemalloc2 libvips postgresql-client

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'

      - name: Install JavaScript dependencies
        run: yarn install

      - name: Build assets
        run: bin/rails assets:precompile

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Initialize test databases
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
        run: bin/rails db:test:prepare

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          REDIS_URL: redis://localhost:6379/0
        run: bundle exec rspec spec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/ci/screenshots
          if-no-files-found: ignore

  preview:
    needs: [scan_ruby, test]
    if: github.event_name == 'pull_request' && github.base_ref == 'staging' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    env:
      HETZNER_API_KEY: ${{ secrets.HETZNER_API_KEY }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      GITHUB_USERNAME: ${{ github.actor }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
      - name: Provision preview environment
        run: bin/provision
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: Install Kamal
        run: gem install kamal
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/your-app:preview-${{ github.event.pull_request.number }} .
          echo ${{ secrets.REGISTRY_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/your-app:preview-${{ github.event.pull_request.number }}
      - name: Deploy with Kamal
        run: |
          kamal setup -c preview
          kamal deploy -c preview
      - name: Run tests on preview environment
        run: |
          bin/rails db:create db:migrate
          bundle exec rspec spec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/preview-${{ github.event.pull_request.number }}/screenshots
          if-no-files-found: ignore

  teardown_preview:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.base_ref == 'staging'
    runs-on: ubuntu-latest
    env:
      HETZNER_API_KEY: ${{ secrets.HETZNER_API_KEY }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      GITHUB_USERNAME: ${{ github.actor }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
      - name: Teardown preview environment
        run: bin/teardown preview

  staging:
    needs: [scan_ruby, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    env:
      HETZNER_API_KEY: ${{ secrets.HETZNER_API_KEY }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      GITHUB_USERNAME: ${{ github.actor }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
      - name: Provision staging environment
        run: bin/provision
      # ... (rest of the staging job steps)

  production:
    needs: [scan_ruby, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      HETZNER_API_KEY: ${{ secrets.HETZNER_API_KEY }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      GITHUB_USERNAME: ${{ github.actor }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
      - name: Provision production environment
        run: bin/provision
      # ... (rest of the production job steps)
